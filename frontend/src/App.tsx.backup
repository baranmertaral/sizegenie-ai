import React, { useState, useRef } from 'react';
import './App.css';

interface SizeRequest {
  user_height: number;
  user_weight: number;
  product_name: string;
  product_size: string;
  brand: string;
  gender: string;
}

interface Product {
  name: string;
  price: string;
  image: string;
  url: string;
  brand: string;
  match_score?: number;
}

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  products?: Product[];
  timestamp: number;
}

type AnalysisType = 'splash' | 'home' | 'photo' | 'size' | 'chat' | 'size-guide';

function App() {
  // Ana state - splash ile ba≈ülƒ±yor
  const [currentPage, setCurrentPage] = useState<AnalysisType>('splash');
  
  // Size analysis states - KONTROL EDƒ∞LEN DEƒûERLER
  const [userHeight, setUserHeight] = useState<number>(175);
  const [userWeight, setUserWeight] = useState<number>(70);
  const [productSize, setProductSize] = useState<string>('M');
  const [gender, setGender] = useState<string>('kadƒ±n');
  
  const [result, setResult] = useState<any>(null);
  const [photoResult, setPhotoResult] = useState<any>(null);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedBrand, setSelectedBrand] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [photoLoading, setPhotoLoading] = useState(false);
  const [productsLoading, setProductsLoading] = useState(false);

  // Chat states
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [chatLoading, setChatLoading] = useState(false);
  const [conversationId, setConversationId] = useState<string>('');

  // REFS FOR UNCONTROLLED INPUTS
  const brandInputRef = useRef<HTMLInputElement>(null);
  const productInputRef = useRef<HTMLInputElement>(null);
  const chatInputRef = useRef<HTMLInputElement>(null);

  // Analysis history state
  const [analysisHistory, setAnalysisHistory] = useState<any[]>([]);

  const brands = ['Zara', 'Pull & Bear', 'Stradivarius'];

  // Beden kar≈üƒ±la≈ütƒ±rma verisi
  const sizeChart = {
    kadƒ±n: {
      XS: { Zara: "XS", "Pull & Bear": "XS", Stradivarius: "XS", "H&M": "32", Mango: "XS" },
      S: { Zara: "S", "Pull & Bear": "S", Stradivarius: "S", "H&M": "34", Mango: "S" },
      M: { Zara: "M", "Pull & Bear": "M", Stradivarius: "M", "H&M": "36", Mango: "M" },
      L: { Zara: "L", "Pull & Bear": "L", Stradivarius: "L", "H&M": "38", Mango: "L" },
      XL: { Zara: "XL", "Pull & Bear": "L", Stradivarius: "XL", "H&M": "40", Mango: "XL" },
      XXL: { Zara: "XXL", "Pull & Bear": "XL", Stradivarius: "XXL", "H&M": "42", Mango: "XXL" }
    },
    erkek: {
      XS: { Zara: "XS", "Pull & Bear": "XS", Stradivarius: "XS", "H&M": "44", Mango: "XS" },
      S: { Zara: "S", "Pull & Bear": "S", Stradivarius: "S", "H&M": "46", Mango: "S" },
      M: { Zara: "M", "Pull & Bear": "M", Stradivarius: "M", "H&M": "48", Mango: "M" },
      L: { Zara: "L", "Pull & Bear": "L", Stradivarius: "L", "H&M": "50", Mango: "L" },
      XL: { Zara: "XL", "Pull & Bear": "XL", Stradivarius: "XL", "H&M": "52", Mango: "XL" },
      XXL: { Zara: "XXL", "Pull & Bear": "XXL", Stradivarius: "XXL", "H&M": "54", Mango: "XXL" }
    }
  };

  // Analiz ge√ßmi≈üine ekleme fonksiyonu
  const addToHistory = (type: string, data: any) => {
    const historyItem = {
      id: Date.now(),
      type,
      data,
      timestamp: new Date().toLocaleString('tr-TR'),
      date: new Date().toLocaleDateString('tr-TR')
    };
    
    const updatedHistory = [historyItem, ...analysisHistory].slice(0, 10); // Son 10 analiz
    setAnalysisHistory(updatedHistory);
    
    // LocalStorage'a kaydet
    try {
      localStorage.setItem('aura_analysis_history', JSON.stringify(updatedHistory));
    } catch (error) {
      console.log('LocalStorage kullanƒ±lamƒ±yor');
    }
  };

  // Uygulama a√ßƒ±lƒ±≈üƒ±nda ge√ßmi≈üi y√ºkle
  React.useEffect(() => {
    try {
      const savedHistory = localStorage.getItem('aura_analysis_history');
      if (savedHistory) {
        setAnalysisHistory(JSON.parse(savedHistory));
      }
    } catch (error) {
      console.log('Ge√ßmi≈ü y√ºklenemedi');
    }
  }, []);

  // Splash'tan ana sayfaya ge√ßi≈ü
  const handleSplashToHome = () => {
    setCurrentPage('home');
  };

  // Size analysis function - "BU BEDEN BANA UYAR MI?" SORGUSU
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setResult(null);
    
    const formData = {
      user_height: userHeight,
      user_weight: userWeight,
      product_name: productInputRef.current?.value || '',
      product_size: productSize,
      brand: brandInputRef.current?.value || '',
      gender: gender
    };
    
    try {
      const response = await fetch('http://localhost:8000/analyze-size', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });
      
      if (response.status === 429) {
        setResult({
          success: false,
          error_type: "quota_exceeded",
          title: "üö® AI Beden Analiz Limiti A≈üƒ±ldƒ±",
          message: "G√ºnl√ºk AI analiz limitine ula≈üƒ±ldƒ±. L√ºtfen 24 saat sonra tekrar deneyin.",
          retry_info: "Ger√ßek Gemini AI quota resetlenince aktif olacak.",
          is_error: true
        });
      } else if (response.status === 503) {
        setResult({
          success: false,
          error_type: "service_unavailable",
          title: "‚ö†Ô∏è AI Beden Analiz Servisi Ge√ßici Olarak Kullanƒ±lamƒ±yor", 
          message: "Gemini AI ≈üu anda eri≈üilemiyor. L√ºtfen daha sonra tekrar deneyin.",
          is_error: true
        });
      } else if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      } else {
        const data = await response.json();
        setResult(data);
        
        // Ge√ßmi≈üe ekle
        addToHistory('size_analysis', {
          gender,
          height: userHeight,
          weight: userWeight,
          brand: brandInputRef.current?.value,
          product: productInputRef.current?.value,
          size: productSize,
          bmi: data.bmi,
          result: data.recommendation
        });
      }
      
    } catch (error) {
      console.error('Size analysis error:', error);
      setResult({
        success: false,
        error_type: "network_error",
        title: "üîå Baƒülantƒ± Hatasƒ±",
        message: "AI beden analiz servisiyle baƒülantƒ± kurulamadƒ±.",
        is_error: true
      });
    } finally {
      setLoading(false);
    }
  };

  // Photo analysis function
  const handlePhotoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    setPhotoLoading(true);
    setPhotoResult(null);
    
    try {
      const formData = new FormData();
      formData.append('file', file);
      
      const response = await fetch('http://localhost:8000/analyze-photo', {
        method: 'POST',
        body: formData,
      });
      
      if (response.status === 429) {
        setPhotoResult({
          success: false,
          error_type: "quota_exceeded",
          title: "üö® AI Analiz Limiti A≈üƒ±ldƒ±",
          message: "G√ºnl√ºk AI Vision analiz limitine ula≈üƒ±ldƒ±. L√ºtfen 24 saat sonra tekrar deneyin.",
          retry_info: "Quota yarƒ±n resetlenecek ve ger√ßek AI analizleri tekrar aktif olacak.",
          is_error: true
        });
      } else if (response.status === 503) {
        setPhotoResult({
          success: false,
          error_type: "service_unavailable", 
          title: "‚ö†Ô∏è AI Servisi Ge√ßici Olarak Kullanƒ±lamƒ±yor",
          message: "Gemini Vision AI ≈üu anda eri≈üilemiyor. L√ºtfen daha sonra tekrar deneyin.",
          is_error: true
        });
      } else if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      } else {
        const data = await response.json();
        setPhotoResult(data);
        
        // Ge√ßmi≈üe ekle
        addToHistory('photo_analysis', {
          analysis: data.analysis,
          ai_type: data.ai_type,
          timestamp: new Date().toLocaleString('tr-TR')
        });
      }
      
    } catch (error) {
      console.error('Photo analysis error:', error);
      setPhotoResult({
        success: false,
        error_type: "network_error",
        title: "üîå Baƒülantƒ± Hatasƒ±", 
        message: "AI servisiyle baƒülantƒ± kurulamadƒ±. ƒ∞nternet baƒülantƒ±nƒ±zƒ± kontrol edin.",
        is_error: true
      });
    } finally {
      setPhotoLoading(false);
    }
  };

  // Brand selection function
  const handleBrandSelect = async (brand: string) => {
    setSelectedBrand(brand);
    setProductsLoading(true);
    setProducts([]);
    
    try {
      let analysisText = "Rectangle";
      
      if (currentPage === 'photo' && photoResult && photoResult.analysis) {
        analysisText = photoResult.analysis;
      } else if (currentPage === 'size' && result && result.recommendation) {
        analysisText = result.recommendation;
      }
      
      console.log(`üõçÔ∏è ${brand} i√ßin dinamik √ºr√ºnler getiriliyor...`);
      
      const response = await fetch('http://localhost:8000/get-products', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          brand: brand,
          body_type: analysisText,
          category: 'woman'
        }),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const data = await response.json();
      console.log(`‚úÖ ${data.product_count || 0} dinamik √ºr√ºn geldi`);
      setProducts(data.products || []);
      
    } catch (error) {
      console.error('Products error:', error);
      alert(`${brand} √ºr√ºnleri y√ºklenirken hata olu≈ütu. L√ºtfen tekrar deneyin.`);
    } finally {
      setProductsLoading(false);
    }
  };

  // Chat send function - REF'DEN DEƒûER AL
  const handleChatSend = async () => {
    const chatInput = chatInputRef.current?.value?.trim();
    if (!chatInput || chatLoading) return;
    
    // Input'u temizle
    if (chatInputRef.current) {
      chatInputRef.current.value = '';
    }
    
    setChatLoading(true);
    
    const newUserMessage: ChatMessage = {
      role: 'user',
      content: chatInput,
      timestamp: Date.now()
    };
    setChatMessages(prev => [...prev, newUserMessage]);
    
    try {
      const response = await fetch('http://localhost:8000/chat-product-search', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: chatInput,
          conversation_id: conversationId || undefined
        }),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.conversation_id && !conversationId) {
        setConversationId(data.conversation_id);
      }
      
      const aiMessage: ChatMessage = {
        role: 'assistant',
        content: data.ai_response,
        products: data.products || [],
        timestamp: Date.now()
      };
      setChatMessages(prev => [...prev, aiMessage]);
      
      console.log(`ü§ñ ${data.products?.length || 0} √ºr√ºn √∂nerisi geldi`);
      
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: '√úzg√ºn√ºm, bir hata olu≈ütu. L√ºtfen tekrar deneyin.',
        timestamp: Date.now()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    } finally {
      setChatLoading(false);
      // Focus'u geri ver
      if (chatInputRef.current) {
        chatInputRef.current.focus();
      }
    }
  };

  // SPLASH SAYFASI - YENƒ∞!
  const SplashPage = () => (
    <div className="splash-page">
      <div className="splash-content">
        <div className="aura-logo">
          <h1>AURA</h1>
          <div className="aura-glow"></div>
        </div>
        
        <div className="splash-text">
          <p>Auranƒ± deƒüi≈ütirelim mi?</p>
        </div>
        
        <button className="splash-btn" onClick={handleSplashToHome}>
          Hadi
        </button>
      </div>
    </div>
  );

  // Ana Sayfa Component
  const HomePage = () => (
    <div className="home-page">
      <div className="home-header">
        <div className="aura-logo-small">AURA</div>
        <p className="home-subtitle">AI destekli kƒ±yafet beden √∂nerisi ve √ºr√ºn analizi</p>
      </div>
      
      <div className="analysis-selection">
        <h2>ü§î Hangi analizi yapmak istiyorsunuz?</h2>
        
        <div className="analysis-options">
          <div className="analysis-card" onClick={() => setCurrentPage('photo')}>
            <div className="analysis-icon">üì∏</div>
            <div className="analysis-card-content">
              <h3>Fotoƒüraf Analizi</h3>
              <p>V√ºcut tipinizi analiz etmek i√ßin fotoƒürafƒ±nƒ±zƒ± y√ºkleyin</p>
              <button className="analysis-btn">Fotoƒüraf Y√ºkle</button>
            </div>
          </div>
          
          <div className="analysis-card" onClick={() => setCurrentPage('size')}>
            <div className="analysis-icon">üìè</div>
            <div className="analysis-card-content">
              <h3>Beden Analizi</h3>
              <p>Boy ve kilo bilgilerinizle beden √∂nerisi alƒ±n</p>
              <button className="analysis-btn">Beden Analizi</button>
            </div>
          </div>
          
          <div className="analysis-card" onClick={() => setCurrentPage('chat')}>
            <div className="analysis-icon">ü§ñ</div>
            <div className="analysis-card-content">
              <h3>AI √úr√ºn Asistanƒ±</h3>
              <p>Hayalinizdeki √ºr√ºn√º tarif edin, size bulalƒ±m!</p>
              <button className="analysis-btn">Chat Ba≈ülat</button>
            </div>
            <div className="analysis-card" onClick={() => setCurrentPage('size-guide')}>
              <div className="analysis-icon">üìä</div>
              <div className="analysis-card-content">
                <h3>Beden Rehberi</h3>
                <p>Markalar arasƒ± beden kar≈üƒ±la≈ütƒ±rmasƒ± ve ge√ßmi≈ü analizleriniz</p>
                <button className="analysis-btn">Beden Rehberi</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // Fotoƒüraf Analizi Sayfasƒ±
  const PhotoAnalysisPage = () => (
    <div className="analysis-page">
      <div className="page-header">
        <button className="back-btn" onClick={() => setCurrentPage('home')}>
          ‚Üê Geri D√∂n
        </button>
        <h1>üì∏ Fotoƒüraf Analizi</h1>
      </div>
      
      <div className="photo-section">
        <p>V√ºcut tipinizi analiz etmek i√ßin fotoƒürafƒ±nƒ±zƒ± y√ºkleyin</p>
        <input
          type="file"
          accept="image/*"
          onChange={handlePhotoUpload}
          className="photo-input"
        />
        {photoLoading && <p className="loading">ü§ñ Fotoƒüraf analiz ediliyor...</p>}
        
        {photoResult && (
          <div className={`result ${photoResult.is_error ? 'error-result' : 'photo-result'}`}>
            {photoResult.is_error ? (
              <div className="error-content">
                <h3>{photoResult.title}</h3>
                <p className="error-message">{photoResult.message}</p>
                {photoResult.retry_info && (
                  <p className="retry-info">üí° {photoResult.retry_info}</p>
                )}
                {photoResult.error_type === "quota_exceeded" && (
                  <div className="quota-info">
                    <p>ü§ñ <strong>Bu ger√ßek AI sistemi!</strong></p>
                    <p>Fotoƒürafƒ±nƒ±zƒ± Gemini Vision AI ger√ßekten analiz ediyor.</p>
                    <p>Quota sƒ±nƒ±rƒ± teknolojinin g√ºc√ºn√ºn kanƒ±tƒ±! üöÄ</p>
                  </div>
                )}
              </div>
            ) : (
              <>
                <h3>üìä Ger√ßek AI V√ºcut Analizi:</h3>
                <pre>{photoResult.analysis}</pre>
                
                <div className="brand-selection">
                  <h4>üõçÔ∏è Hangi markadan √∂neri istiyorsunuz?</h4>
                  <div className="brand-buttons">
                    {brands.map(brand => (
                      <button
                        key={brand}
                        onClick={() => handleBrandSelect(brand)}
                        className={`brand-btn ${selectedBrand === brand ? 'active' : ''}`}
                        data-brand={brand}
                      >
                        {brand}
                      </button>
                    ))}
                  </div>
                </div>
              </>
            )}
          </div>
        )}
      </div>
      
      {productsLoading && (
        <div className="loading-products">
          <p>üõí {selectedBrand} √ºr√ºnleri getiriliyor...</p>
        </div>
      )}

      {products.length > 0 && (
        <div className="products-section">
          <h2>üõçÔ∏è {selectedBrand} √ñnerileri</h2>
          <div className="products-grid">
            {products.map((product, index) => (
              <div key={index} className="product-card" onClick={() => window.open(product.url, '_blank')}>
                <img src={product.image} alt={product.name} />
                <div className="product-info">
                  <h4>{product.name}</h4>
                  <p className="price">{product.price}</p>
                  <span className="brand-tag">{product.brand}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );

  // Beden Analizi Sayfasƒ± - "BU BEDEN BANA UYAR MI?"
  const SizeAnalysisPage = () => (
    <div className="analysis-page">
      <div className="page-header">
        <button className="back-btn" onClick={() => setCurrentPage('home')}>
          ‚Üê Geri D√∂n
        </button>
        <h1>üìè Beden Analizi</h1>
      </div>
      
      <form onSubmit={handleSubmit} className="size-form">
        <div className="form-group">
          <label>Cinsiyet:</label>
          <select
            value={gender}
            onChange={(e) => setGender(e.target.value)}
            className="gender-select"
          >
            <option value="kadƒ±n">üë© Kadƒ±n</option>
            <option value="erkek">üë® Erkek</option>
          </select>
        </div>

        <div className="form-group">
          <label>Boy (cm):</label>
          <input
            type="number"
            value={userHeight}
            onChange={(e) => setUserHeight(Number(e.target.value))}
          />
        </div>
        
        <div className="form-group">
          <label>Kilo (kg):</label>
          <input
            type="number"
            value={userWeight}
            onChange={(e) => setUserWeight(Number(e.target.value))}
          />
        </div>
        
        <div className="form-group">
          <label>Marka:</label>
          <input
            ref={brandInputRef}
            type="text"
            placeholder="√∂rn: Zara, H&M, Nike"
            autoComplete="off"
          />
        </div>
        
        <div className="form-group">
          <label>√úr√ºn:</label>
          <input
            ref={productInputRef}
            type="text"
            placeholder="√∂rn: Basic T-Shirt, Jeans"
            autoComplete="off"
          />
        </div>
        
        <div className="form-group">
          <label>Denemek ƒ∞stediƒüim Beden:</label>
          <select
            value={productSize}  
            onChange={(e) => setProductSize(e.target.value)}
          >
            <option value="XS">XS</option>
            <option value="S">S</option>
            <option value="M">M</option>
            <option value="L">L</option>
            <option value="XL">XL</option>
            <option value="XXL">XXL</option>
          </select>
        </div>
        
        <button type="submit" disabled={loading}>
          {loading ? 'ü§ñ AI Analiz Ediyor...' : 'üéØ Bu Beden Bana Uyar mƒ±?'}
        </button>
      </form>
      
      {result && (
        <div className={`result ${result.is_error ? 'error-result' : ''}`}>
          {result.is_error ? (
            <div className="error-content">
              <h3>{result.title}</h3>
              <p className="error-message">{result.message}</p>
              {result.retry_info && (
                <p className="retry-info">üí° {result.retry_info}</p>
              )}
              {result.error_type === "quota_exceeded" && (
                <div className="quota-info">
                  <p>ü§ñ <strong>Bu ger√ßek AI beden analiz sistemi!</strong></p>
                  <p>√ñl√ß√ºlerinizi Gemini AI ger√ßekten hesaplƒ±yor.</p>
                  <p>Quota sƒ±nƒ±rƒ± sistemin ger√ßekliƒüinin kanƒ±tƒ±! üöÄ</p>
                </div>
              )}
            </div>
          ) : (
            <>
              <h3>üìä AI Beden Uygunluk Analizi:</h3>
              <pre>{result.recommendation}</pre>
              
              <div className="next-step-info">
                <h4>üéØ Diƒüer √ñzellikler:</h4>
                <p>‚Ä¢ <strong>Fotoƒüraf Analizi</strong> ile v√ºcut tipinizi ke≈üfedin</p>
                <p>‚Ä¢ <strong>AI Asistanƒ±</strong> ile farklƒ± √ºr√ºn √∂nerileri alƒ±n</p>
                <div className="action-buttons">
                  <button 
                    className="next-action-btn" 
                    onClick={() => setCurrentPage('photo')}
                  >
                    üì∏ Fotoƒüraf Analizi
                  </button>
                  <button 
                    className="next-action-btn" 
                    onClick={() => setCurrentPage('chat')}
                  >
                    ü§ñ AI Asistanƒ±
                  </button>
                </div>
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );

  // Chat Sayfasƒ± - UNCONTROLLED INPUT
  const ChatPage = () => (
    <div className="analysis-page">
      <div className="page-header">
        <button className="back-btn" onClick={() => setCurrentPage('home')}>
          ‚Üê Geri D√∂n
        </button>
        <h1>ü§ñ AI √úr√ºn Asistanƒ±</h1>
      </div>
      
      <div className="chat-container">
        <div className="chat-messages">
          {chatMessages.length === 0 && (
            <div className="chat-welcome">
              <h3>üëã Merhaba! Size nasƒ±l yardƒ±mcƒ± olabilirim?</h3>
              <p>ƒ∞stediƒüiniz √ºr√ºn√º detaylƒ±ca tarif edin, size en uygun se√ßenekleri bulayƒ±m.</p>
              <div className="example-messages">
                <p><strong>√ñrnek:</strong> "Beyaz, oversize, vintage tarzƒ± bir ti≈ü√∂rt istiyorum"</p>
                <p><strong>√ñrnek:</strong> "Y√ºksek bel, wide leg bir jean arƒ±yorum"</p>
              </div>
            </div>
          )}
          
          {chatMessages.map((message, index) => (
            <div key={index} className={`message ${message.role}`}>
              <div className="message-content">
                <p>{message.content}</p>
                
                {message.products && message.products.length > 0 && (
                  <div className="chat-products">
                    <h4>üõçÔ∏è Sizin i√ßin bulduƒüum √ºr√ºnler:</h4>
                    <div className="chat-products-grid">
                      {message.products.map((product, pIndex) => (
                        <div key={pIndex} className="chat-product-card" onClick={() => window.open(product.url, '_blank')}>
                          <img src={product.image} alt={product.name} />
                          <div className="chat-product-info">
                            <h5>{product.name}</h5>
                            <p className="price">{product.price}</p>
                            <span className="brand">{product.brand}</span>
                            {product.match_score && (
                              <span className="match-score">‚ú® {product.match_score}% uyum</span>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}
          
          {chatLoading && (
            <div className="message assistant">
              <div className="message-content">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
        </div>
        
        <div className="chat-input-area">
          <div className="chat-input-container">
            <input
              ref={chatInputRef}
              type="text"
              placeholder="ƒ∞stediƒüiniz √ºr√ºn√º tarif edin..."
              className="chat-input"
              disabled={chatLoading}
              autoComplete="off"
              onKeyPress={(e) => {
                if (e.key === 'Enter' && !chatLoading) {
                  e.preventDefault();
                  handleChatSend();
                }
              }}
            />
            <button 
              onClick={handleChatSend}
              disabled={chatLoading}
              className="chat-send-btn"
            >
              {chatLoading ? '‚è≥' : 'üì§'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  // Beden Rehberi Sayfasƒ± - YENƒ∞!
  const SizeGuidePage = () => (
    <div className="analysis-page">
      <div className="page-header">
        <button className="back-btn" onClick={() => setCurrentPage('home')}>
          ‚Üê Geri D√∂n
        </button>
        <h1>üìä Beden Rehberi</h1>
      </div>
      
      <div className="size-guide-container">
        {/* Beden Kar≈üƒ±la≈ütƒ±rma Tablosu */}
        <div className="size-comparison">
          <h2>üîÑ Markalar Arasƒ± Beden Kar≈üƒ±la≈ütƒ±rmasƒ±</h2>
          <p>Bir markada hangi bedeni giyiyorsanƒ±z, diƒüer markalarda hangi bedeni se√ßmelisiniz?</p>
          
          <div className="gender-tabs">
            <button 
              className={`gender-tab ${gender === 'kadƒ±n' ? 'active' : ''}`}
              onClick={() => setGender('kadƒ±n')}
            >
              üë© Kadƒ±n
            </button>
            <button 
              className={`gender-tab ${gender === 'erkek' ? 'active' : ''}`}
              onClick={() => setGender('erkek')}
            >
              üë® Erkek
            </button>
          </div>

          <div className="size-chart">
            <table className="comparison-table">
              <thead>
                <tr>
                  <th>Standart</th>
                  <th>Zara</th>
                  <th>Pull & Bear</th>
                  <th>Stradivarius</th>
                  <th>H&M</th>
                  <th>Mango</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(sizeChart[gender as keyof typeof sizeChart]).map(([size, brands]) => (
                  <tr key={size}>
                    <td className="size-standard">{size}</td>
                    <td>{brands.Zara}</td>
                    <td>{brands["Pull & Bear"]}</td>
                    <td>{brands.Stradivarius}</td>
                    <td>{brands["H&M"]}</td>
                    <td>{brands.Mango}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Analiz Ge√ßmi≈üi */}
        <div className="analysis-history">
          <h2>üìú Analiz Ge√ßmi≈üiniz</h2>
          <p>Son yaptƒ±ƒüƒ±nƒ±z analizler ve sonu√ßlarƒ±</p>
          
          {analysisHistory.length === 0 ? (
            <div className="no-history">
              <p>Hen√ºz analiz ge√ßmi≈üiniz bulunmuyor.</p>
              <p>Beden analizi veya fotoƒüraf analizi yaptƒ±ƒüƒ±nƒ±zda burada g√∂r√ºnecek!</p>
            </div>
          ) : (
            <div className="history-list">
              {analysisHistory.map((item) => (
                <div key={item.id} className="history-item">
                  <div className="history-header">
                    <span className="history-type">
                      {item.type === 'size_analysis' ? 'üìè Beden Analizi' : 
                       item.type === 'photo_analysis' ? 'üì∏ Fotoƒüraf Analizi' : 'ü§ñ Chat'}
                    </span>
                    <span className="history-date">{item.timestamp}</span>
                  </div>
                  
                  <div className="history-content">
                    {item.type === 'size_analysis' && (
                      <div className="size-history">
                        <p><strong>üë§ Cinsiyet:</strong> {item.data.gender}</p>
                        <p><strong>üìè Boy/Kilo:</strong> {item.data.height}cm / {item.data.weight}kg</p>
                        <p><strong>üè∑Ô∏è √úr√ºn:</strong> {item.data.brand} {item.data.product} ({item.data.size})</p>
                        <p><strong>üìä BMI:</strong> {item.data.bmi?.toFixed(1)}</p>
                      </div>
                    )}
                    
                    {item.type === 'photo_analysis' && (
                      <div className="photo-history">
                        <p><strong>ü§ñ AI Tipi:</strong> {item.data.ai_type}</p>
                        <div className="analysis-preview">
                          {item.data.analysis?.substring(0, 150)}...
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );

export default App;
